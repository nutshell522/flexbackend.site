@model IEnumerable<Customized_Shoes.dll.Models.ViewModels.ShoesCategoryVM>

@{
    ViewBag.Title = "分類管理";
    var criteria = ViewBag.Criteria as Customized_Shoes.dll.Models.Exts.ShoesCategoryCriteria;
}

<h2>功能分類管理</h2>

<p>

</p>
<div class="search-bar-container mb-4 d-flex">
    <form method="get" class="me-auto w-100">
        <div class="d-flex">
            <div class="left d-flex me-auto">
                @* 輸入框區域 寬度可移除下方class w-50 自行調整 *@
                <div class="row">
                    @*@Html.TextBoxFor(model => criteria.Name, new { @class = "form-control", placeholder = "搜尋..." })*@
                    <input id="index_Search" class="form-control " name="criteria.ShoesCategoryName" type="text" value="@criteria.ShoesCategoryName" placeholder="搜尋分類...">
                </div>
                <div class="right">
                    <button id="searchBtn" class="btn btn-primary">搜尋</button>
                    @Html.ActionLink("新增功能分類", "Create", null, new { @class = "btn btn-primary" })
                    <div class="btn btn-dark">
                        <a href="@Url.Action("Index", "ShoesColorCategories", new { area = "" })">跳到主顏色分類頁面</a>
                    </div>
                </div>
            </div>
        </div>
    </form>
</div>
<div class="table-container col-4">
    <table>
        <thead>
            <tr>
                @* 有class sort-btn 能當排序按鈕，點擊切換上下箭頭，不過資料排序function須自己處理 *@
                @* 同時也有提供 th-col- 作為粗略每列寬度設定
                    th-col-0 至 th-col-20
                    超過100%資料不會溢出 也不會換行
                    如有細緻設定需求，可自己寫css設定寬度
                *@
                <th class="th-col-0 sticky">
                    <label class="form-check-label">
                        <input class="form-check-input check-all" type="checkbox">
                    </label>
                </th>
                <th class="th-col-1">
                    @Html.DisplayNameFor(model => model.ShoesCategoryName)
                </th>
                <th>管理</th>
            </tr>
        </thead>
        <tbody>
            @* 如有照片要放
                格式:
                <td><div class="table-img-container"><img src="XXX.png" alt=""></div></td>
            *@
            @*  顯示資料內有定義了狀態框，
                如有需展示狀態顏色，請在td內增加一個span，且定義class
                有提供四種顏色:
                    綠色 : status-success
                    灰色 : status-dark
                    紅色 : status-danger
                    藍色 : status-primary
                可依自己需求使用

                格式: <td class="text-center"><span class="status-success}">進行中</span></td>
            *@

            @foreach (var item in Model)
            {
                <tr>
                    @* 下方data-id後方欄位抓id，可方便勾選框抓資料 *@
                    <td class="sticky"><input class="form-check-input check-item" type="checkbox" data-id="@item.ShoesCategoryId"></td>
                    <td>
                        @Html.DisplayFor(modelItem => item.ShoesCategoryName)
                    </td>
                    <td>
                        <div class="manage-btn-container">
                            <a href="@Url.Action("Edit", new { id = item.ShoesCategoryId  })" class="btn-edit"><i class="bi bi-pencil-square"></i></a>
                            <a href="@Url.Action("Details", new { id = item.ShoesCategoryId  })" class="btn-view"><i class="bi bi-clipboard-check"></i></a>
                            <a href="@Url.Action("Delete", new { id = item.ShoesCategoryId  })" class="btn-del"><i class="bi bi-trash-fill"></i></a>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>
@section Scripts{
    <script>

        $(document).ready(function () {

            //重新載入畫面
            function loadCategory() {
                var criteria = {
                    ShoesCategoryName: $('#index_Search').val(),
                };
                reSetIndexProduct(criteria);
            }

            function reSetIndexProduct(criteria) {
                $.ajax({
                    url: '@Url.Action("Index", "ShoesCategories")',
                    type: 'POST',
                    data: criteria,
                    dataType: 'json',
                    success: function (response) {
                        // 請求成功後的處理邏輯
                        //console.log(response);

                        var table = $('.table tbody');
                        table.empty();

                        $.each(response, function (index, shoescategories) {
                            var row = `
                    <tr>
                        <td class="sticky"><input class="form-check-input check-item" type="checkbox" data-id="${shoescategories.ShoesCategoryId}"></td>
                        <td>
                            ${shoescategories.ShoesCategoryName}
                        </td>
                        <td>
                            <div class="manage-btn-container">
                                <a href="/Products/Edit?ShoesCategoryId=${shoescategories.ShoesCategoryId}" class="btn-edit"><i class="bi bi-pencil-square"></i></a>
                                <a href="/Products/Details?ShoesCategoryId=${shoescategories.ShoesCategoryId}" class="btn-view"><i class="bi bi-clipboard-check"></i></a>
                                <a href="/Products/Delete?ShoesCategoryId=${shoescategories.ShoesCategoryId}" class="btn-del"><i class="bi bi-trash-fill"></i></a>
                            </div>
                        </td>
                    </tr>`;

                        table.append(row);
                        });
                    },
                    error: function (xhr, status, error) {
                        // 請求失敗時的處理邏輯
                        console.log(error);
                    }
                });
            }

            // 在頁面載入完成時觸發請求
            loadCategory();

            // 監聽搜尋按鈕的點擊事件
            $('#searchBtn').click(function (e) {
                e.preventDefault();
                loadCategory();
            });
        });

    </script>

    <script>
        window.onload = function () {
            // 替排序按鈕寫入排序箭頭出現事件
            document.querySelectorAll(".sort-btn").forEach(item => {
                item.addEventListener("click", function () {
                    // sortClickHandler 可寫入第二個參數，是委派
                    sortClickHandler(this);
                });
            });

            function sortClickHandler(targetBtn, callback = null) {
                truncateSortAttr(targetBtn);
                resetSortBtns();

                var sortValue = targetBtn.getAttribute('sort');
                var newSortValue = (sortValue && sortValue == 'asc') ? 'desc' : 'asc';
                setSort(targetBtn, newSortValue);

                callback && callback();
            }

            // 給按鈕加上排序箭頭
            function setSort(sortBtn, setSort) {
                sortBtn.setAttribute('sort', setSort);
                if (setSort == 'asc') {
                    sortBtn.innerHTML += '<i class="bi bi-arrow-up-short"></i>';
                } else if (setSort == 'desc') {
                    sortBtn.innerHTML += '<i class="bi bi-arrow-down-short"></i>';
                }
            }

            // 清空所有排序按鈕的箭頭
            function resetSortBtns() {
                var sortBtns = document.querySelectorAll(".sort-btn");
                sortBtns.forEach(function (btn) {
                    if (btn.innerHTML.includes("</i>")) {
                        btn.innerHTML = btn.innerHTML.substring(0, btn.innerHTML.indexOf("<"));
                    }
                });
            }

            // 清空被點擊外的其他按鈕的排序attr
            function truncateSortAttr(thisBtn = null) {
                var sortBtns = document.querySelectorAll(".sort-btn");
                sortBtns.forEach(function (btn) {
                    if (btn !== thisBtn) {
                        btn.removeAttribute('sort');
                    }
                });
            }
        };
    </script>
}

@model IEnumerable<Orders.ViewModels.OrderItemsVM>

@{
    ViewBag.Title = "OrderItemsIndex";
}

<h2>訂單明細</h2>

<p>

</p>
<div class="search-bar-container mb-4 d-flex">
    <div class="left w-50 me-auto">
        @* 輸入框區域 寬度可移除下方class w-50 自行調整 *@
        <div>
            <a href="@Url.Action("OrdersIndex")" class="btn btn-primary text-light">
                回到訂單管理
            </a>
        </div>
    </div>

    @if (TempData["close"] != null && !(bool)TempData["close"])
    {
        <div class="right">
            <a href="@Url.Action("CreateOrderItems")" class="btn btn-primary text-light">
                <i class="bi bi-plus-lg"></i> 新增
            </a>
        </div>
    }
</div>
<h2>訂單詳情</h2>

<p><strong>收件人電話:</strong> @ViewData["Cellphone"]</p>
<p><strong>收據號碼:</strong> @ViewData["Receipt"]</p>
<p><strong>收件人名稱:</strong> @ViewData["Receiver"]</p>
<p><strong>收件人地址:</strong> @ViewData["RecipientAddress"]</p>
<p><strong>是否結單:</strong> @(TempData["close"] != null && (bool)TempData["close"] ? "是" : "否")</p>
<div class="table-container">
    <table>
        <thead>
            <tr>
                @* 有class sort-btn 能當排序按鈕，點擊切換上下箭頭，不過資料排序function須自己處理 *@
                @* 同時也有提供 th-col- 作為粗略每列寬度設定
                    th-col-0 至 th-col-20
                    超過100%資料不會溢出 也不會換行
                    如有細緻設定需求，可自己寫css設定寬度
                *@
                @*<th class="th-col-0 sticky">
                    <label class="form-check-label">
                        <input class="form-check-input check-all" type="checkbox">
                    </label>
                </th>*@
                <th class="th-col-1">
                    @Html.DisplayNameFor(model => model.order_Id)
                </th>
                <th class="th-col-1">
                    @Html.DisplayNameFor(model => model.product_name)
                </th>
           
                <th class="th-col-1">
                    @Html.DisplayNameFor(model => model.type)
                </th>
                <th class="th-col-1">
                    @Html.DisplayNameFor(model => model.per_price)
                </th>
                <th class="th-col-1">
                    @Html.DisplayNameFor(model => model.quantity)
                </th>
                <th class="th-col-1">
                    @Html.DisplayNameFor(model => model.discount_name)
                </th>
                <th class="th-col-1">
                    @Html.DisplayNameFor(model => model.subtotal)
                </th>
                <th class="th-col-1">
                    @Html.DisplayNameFor(model => model.discount_subtotal)
                </th>
                <th class="th-col-1">
                    @Html.DisplayNameFor(model => model.Items_description)
                </th>
                <th>管理</th>
            </tr>
        </thead>
        <tbody>
            @* 如有照片要放
        格式:
        <td><div class="table-img-container"><img src="XXX.png" alt=""></div></td>
            *@
            @*  顯示資料內有定義了狀態框，
        如有需展示狀態顏色，請在td內增加一個span，且定義class
        有提供四種顏色:
            綠色 : status-success
            灰色 : status-dark
            紅色 : status-danger
            藍色 : status-primary
        可依自己需求使用

        格式: <td class="text-center"><span class="status-success}">進行中</span></td>
            *@

            @foreach (var item in Model)
            {
                <tr>
                    @* 下方data-id后方栏位抓id，可方便勾选框抓数据 *@
                    @*<td class="sticky"><input class="form-check-input check-item" type="checkbox" data-id="${}"></td>*@
                    <td>
                        @Html.DisplayFor(modelItem => item.order_Id)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.product_name)
                    </td>

                    <td>
                        @Html.DisplayFor(modelItem => item.type)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.per_price)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.quantity)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.discount_name)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.subtotal)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.discount_subtotal)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Items_description)
                    </td>
                    <td>
                        @if (TempData["close"] != null && !(bool)TempData["close"])
                        {
                            <div class="manage-btn-container">
                                <a href="@Url.Action("EditItems", new { id = item.Id })" class="btn-edit-@item.Id"><i class="bi bi-pencil-square"></i></a>
                            </div>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>

</div>

@section Scripts{
    <script>
        window.onload = function() {
  // 替排序按鈕寫入排序箭頭出現事件
  document.querySelectorAll(".sort-btn").forEach(item => {
    item.addEventListener("click", function() {
      // sortClickHandler 可寫入第二個參數，是委派
      sortClickHandler(this);
    });
  });

  function sortClickHandler(targetBtn, callback = null) {
    truncateSortAttr(targetBtn);
    resetSortBtns();

    var sortValue = targetBtn.getAttribute('sort');
    var newSortValue = (sortValue && sortValue == 'asc') ? 'desc' : 'asc';
    setSort(targetBtn, newSortValue);

    callback && callback();
  }

  // 給按鈕加上排序箭頭
  function setSort(sortBtn, setSort) {
    sortBtn.setAttribute('sort', setSort);
    if (setSort == 'asc') {
      sortBtn.innerHTML += '<i class="bi bi-arrow-up-short"></i>';
    } else if (setSort == 'desc') {
      sortBtn.innerHTML += '<i class="bi bi-arrow-down-short"></i>';
    }
  }

  // 清空所有排序按鈕的箭頭
  function resetSortBtns() {
    var sortBtns = document.querySelectorAll(".sort-btn");
    sortBtns.forEach(function(btn) {
      if (btn.innerHTML.includes("</i>")) {
        btn.innerHTML = btn.innerHTML.substring(0, btn.innerHTML.indexOf("<"));
      }
    });
  }

  // 清空被點擊外的其他按鈕的排序attr
  function truncateSortAttr(thisBtn = null) {
    var sortBtns = document.querySelectorAll(".sort-btn");
    sortBtns.forEach(function(btn) {
      if (btn !== thisBtn) {
        btn.removeAttribute('sort');
      }
    });
  }
        };

        document.querySelectorAll(".status-switch").forEach(function (statusSwitch) {
            statusSwitch.addEventListener("change", function () {
                var btnEdit = this.parentNode.querySelector(".btn-edit");
                btnEdit.style.display = this.checked ? "none" : "block";
            });
        });
        document.querySelectorAll(".status-switch").forEach(function (statusSwitch) {
            statusSwitch.addEventListener("change", function () {
                var orderId = this.dataset.orderId;
                var btnEdit = document.querySelector(".btn-edit-" + orderId);
                if (btnEdit) {
                    btnEdit.style.display = this.checked ? "none" : "block";
                }
            });
        });
    </script>
}

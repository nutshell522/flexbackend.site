@model Flex.Products.dll.Models.ViewModel.ProductEditVM

@{
    ViewBag.Title = "編輯商品";
    var colorCategory = ViewBag.Color as SelectList;
    var sizeCategory = ViewBag.Size as SelectList;

}

<h2>編輯商品</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal row">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="mb-3 col-12 d-flex">
            <div class="col-3">
                @Html.LabelFor(model => model.ProductId, htmlAttributes: new { @class = "form-label" })

                @Html.EditorFor(model => model.ProductId, new { htmlAttributes = new { @class = "form-control bg-secondary", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.ProductId, "", new { @class = "text-danger" })
            </div>
            <div class="col-3 ms-3">
                @Html.LabelFor(model => model.ProductName, htmlAttributes: new { @class = "form-label" })

                @Html.EditorFor(model => model.ProductName, new { htmlAttributes = new { @class = "form-control", placeholder = "商品名稱" } })
                @Html.ValidationMessageFor(model => model.ProductName, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="col-12">
            <div class="mb-3">
                @Html.LabelFor(model => model.ProductDescription, htmlAttributes: new { @class = "form-label" })

                @Html.TextAreaFor(model => model.ProductDescription, new { @class = "form-control", rows = "5", placeholder = "商品描述" })
                @Html.ValidationMessageFor(model => model.ProductDescription, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="mb-3">
            @Html.LabelFor(model => model.fk_ProductSubCategoryId, htmlAttributes: new { @class = "form-label" })

            @Html.DropDownListFor(model => model.fk_ProductSubCategoryId, ViewBag.ProductSubCategoryId as SelectList, new { @class = "form-select" })
            @Html.ValidationMessageFor(model => model.fk_ProductSubCategoryId, "", new { @class = "text-danger" })
        </div>
        <div class="mb-3 d-flex">
            @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "form-label" })

            <div class="checkbox ms-3">
                @Html.EditorFor(model => model.Status)
                @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="col-12 d-flex mb-3">
            <div class="col-3">
                @Html.LabelFor(model => model.ProductMaterial, htmlAttributes: new { @class = "form-label" })

                @Html.EditorFor(model => model.ProductMaterial, new { htmlAttributes = new { @class = "form-control", placeholder = "材質" } })
                @Html.ValidationMessageFor(model => model.ProductMaterial, "", new { @class = "text-danger" })
            </div>
            <div class="col-3 ms-3">
                @Html.LabelFor(model => model.ProductOrigin, htmlAttributes: new { @class = "form-label" })

                @Html.EditorFor(model => model.ProductOrigin, new { htmlAttributes = new { @class = "form-control", placeholder = "產地" } })
                @Html.ValidationMessageFor(model => model.ProductOrigin, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="mb-3 col-12 d-flex">
            <div class="col-3">
                @Html.LabelFor(model => model.UnitPrice, htmlAttributes: new { @class = "form-label" })

                @Html.EditorFor(model => model.UnitPrice, new { htmlAttributes = new { @class = "form-control", placeholder = "定價" } })
                @Html.ValidationMessageFor(model => model.UnitPrice, "", new { @class = "text-danger" })
            </div>

            <div class="col-3 ms-3">
                @Html.LabelFor(model => model.SalesPrice, htmlAttributes: new { @class = "form-label" })

                @Html.EditorFor(model => model.SalesPrice, new { htmlAttributes = new { @class = "form-control", placeholder = "售價" } })
                @Html.ValidationMessageFor(model => model.SalesPrice, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="mb-3">
            @Html.LabelFor(model => model.Tag, htmlAttributes: new { @class = "form-label" })

            @Html.EditorFor(model => model.Tag, new { htmlAttributes = new { @class = "form-control", placeholder = "標籤" } })
            @Html.ValidationMessageFor(model => model.Tag, "", new { @class = "text-danger" })
        </div>

        <div class="p-3 ms-1 mb-3 border border-4 rounded-2 form-control w-75">
            <div class="mb-3 col-12 d-flex">
                <span class="me-auto">規格</span>
                <input class="btn btn-secondary" id="addSpecBtn" type="button" value="新增規格" />
            </div>
            <div class="specContainer">
                @for (var i = 0; i < Model.ProductGroups.Count; i++)
                {
                    <div class="productGroup d-flex mb-3" id="@Model.ProductGroups[i].ProductGroupId">
                        <select name="ProductGroups[@i].ColorId" class="form-select" min="1">
                            @foreach (var item in colorCategory)
                            {
                                <option value="@item.Value" @(item.Value == Model.ProductGroups[i].ColorId.ToString() ? "selected" : "")>@item.Text</option>
                            }
                        </select>
                        <select name="ProductGroups[@i].SizeId" class="form-select" min="1">
                            @foreach (var item in sizeCategory)
                            {
                                <option value="@item.Value" @(item.Value == Model.ProductGroups[i].SizeId.ToString() ? "selected" : "")>@item.Text</option>
                            }
                        </select>
                        <input class="form-control" type="number" name="ProductGroups[@i].Qty" value="@Model.ProductGroups[i].Qty" min="1" required="required" />
                        <button class="btn btn-danger deleteSpecBtn ms-2">刪除</button>
                        <input type="hidden" name="ProductGroups[@i].ProductGroupId" value="@Model.ProductGroups[i].ProductGroupId" />
                    </div>
                }
            </div>
            @Html.ValidationMessageFor(model => model.ProductGroups, "", new { @class = "text-danger" })
        </div>

        <div class="col-12 d-flex mb-3">
            <div class="col-3">
                @Html.LabelFor(model => model.CreateTime, htmlAttributes: new { @class = "form-label" })

                @Html.EditorFor(model => model.CreateTime, new { htmlAttributes = new { @class = "form-control bg-secondary", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.CreateTime, "", new { @class = "text-danger" })
            </div>

            <div class="col-3 ms-3">
                @Html.LabelFor(model => model.EditTime, htmlAttributes: new { @class = "form-label" })

                @Html.EditorFor(model => model.EditTime, new { htmlAttributes = new { @class = "form-control bg-secondary", @readonly = "readonly" } })
                @Html.ValidationMessageFor(model => model.EditTime, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="mb-3">
            <input type="submit" value="確認" class="btn btn-primary" />
            <input type="button" value="返回" class="btn btn-primary" onclick='location.href="@Url.Action("Index")"' />
        </div>
    </div>
    <div class="d-none">
        @Html.DropDownList("ColorIdTemplate", colorCategory, new { @class = "form-select", id = "colorSelectTemplate" })
        @Html.DropDownList("SizeIdTemplate", sizeCategory, new { @class = "form-select", id = "sizeSelectTemplate" })
    </div>
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}

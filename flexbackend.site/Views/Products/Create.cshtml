@model EFModels.EFModels.Product

@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <div class="row">
        <h4>Product</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="mb-3">
            @Html.LabelFor(model => model.ProductId, htmlAttributes: new { @class = "form-label" })
                @Html.EditorFor(model => model.ProductId, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ProductId, "", new { @class = "text-danger" })
        </div>

        <div class="mb-3">
            @Html.LabelFor(model => model.ProductName, htmlAttributes: new { @class = "form-label" })
                @Html.EditorFor(model => model.ProductName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ProductName, "", new { @class = "text-danger" })
        </div>

        <div class="mb-3">
            @Html.LabelFor(model => model.ProductDescription, htmlAttributes: new { @class = "form-label" })
                @Html.EditorFor(model => model.ProductDescription, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ProductDescription, "", new { @class = "text-danger" })
        </div>

        <div class="mb-3">
            @Html.LabelFor(model => model.ProductMaterial, htmlAttributes: new { @class = "form-label" })
                @Html.EditorFor(model => model.ProductMaterial, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ProductMaterial, "", new { @class = "text-danger" })
        </div>

        <div class="mb-3">
            @Html.LabelFor(model => model.ProductOrigin, htmlAttributes: new { @class = "form-label" })
                @Html.EditorFor(model => model.ProductOrigin, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ProductOrigin, "", new { @class = "text-danger" })
        </div>

        <div class="mb-3">
            @Html.LabelFor(model => model.UnitPrice, htmlAttributes: new { @class = "form-label" })
                @Html.EditorFor(model => model.UnitPrice, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.UnitPrice, "", new { @class = "text-danger" })
        </div>

        <div class="mb-3">
            @Html.LabelFor(model => model.SalesPrice, htmlAttributes: new { @class = "form-label" })
                @Html.EditorFor(model => model.SalesPrice, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.SalesPrice, "", new { @class = "text-danger" })
        </div>

        <div class="mb-3">
            @Html.LabelFor(model => model.StartTime, htmlAttributes: new { @class = "form-label" })
                @Html.EditorFor(model => model.StartTime, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.StartTime, "", new { @class = "text-danger" })
        </div>

        <div class="mb-3">
            @Html.LabelFor(model => model.EndTime, htmlAttributes: new { @class = "form-label" })
                @Html.EditorFor(model => model.EndTime, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.EndTime, "", new { @class = "text-danger" })
        </div>

        <div class="mb-3">
            @Html.LabelFor(model => model.LogOut, htmlAttributes: new { @class = "form-label" })
                <div class="checkbox">
                    @Html.EditorFor(model => model.LogOut)
                    @Html.ValidationMessageFor(model => model.LogOut, "", new { @class = "text-danger" })
                </div>
        </div>

        <div class="mb-3">
            @Html.LabelFor(model => model.Tag, htmlAttributes: new { @class = "form-label" })
                @Html.EditorFor(model => model.Tag, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Tag, "", new { @class = "text-danger" })
        </div>

        <div class="mb-3">
            @Html.LabelFor(model => model.fk_ProductSubCategoryId, "fk_ProductSubCategoryId", htmlAttributes: new { @class = "form-label" })
                @Html.DropDownList("fk_ProductSubCategoryId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.fk_ProductSubCategoryId, "", new { @class = "text-danger" })
        </div>

        <div class="mb-3">
            @Html.LabelFor(model => model.CreateTime, htmlAttributes: new { @class = "form-label" })
                @Html.EditorFor(model => model.CreateTime, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.CreateTime, "", new { @class = "text-danger" })
        </div>

        <div class="mb-3">
            @Html.LabelFor(model => model.EditTime, htmlAttributes: new { @class = "form-label" })
                @Html.EditorFor(model => model.EditTime, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.EditTime, "", new { @class = "text-danger" })
        </div>

        <div class="mb-3">
                <input type="submit" value="Create" class="btn btn-primary" />
                <button id="add" type="button">新增</button>
        </div>

        <div id="123">

        </div>

    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    <script>
        var dymnicCount = 0;
        const deleteHtml = (id) => {
            dymnicCount = dymnicCount - 1;
            const div = document.getElementById(id);
            div.remove();
        }
        const addHtml = () => {
            dymnicCount = dymnicCount + 1;
            return creteHtml();
        }
        const creteHtml = () => {
            let result = '';
            for (let i = 0; i < dymnicCount; i++) {
                result += `
                <div class="mb-3" id="button_${i}">
            <label class="form-label" for="EditTime">CORL</label>
                <input class="form-control text-box single-line" data-val="true" data-val-date="The field EditTime must be a date." data-val-required="EditTime 欄位是必要項。" id="EditTime" name="EditTime" type="datetime" value="">
                <span class="field-validation-valid text-danger" data-valmsg-for="EditTime" data-valmsg-replace="true"></span>
                <button type="button" onclick="deleteHtml('button_${i}')">刪除</button>
        </div>`
            }
            return result;
        }
        const addButton = document.getElementById("add");
        addButton.addEventListener("click", () => {
            const div = document.getElementById('123');
            div.innerHTML = addHtml()
        })
    </script>
    @Scripts.Render("~/bundles/jqueryval")
}

@model Flex.Products.dll.Models.ViewModel.ProductCreateVM

@{
    ViewBag.Title = "新增商品";
    var colorCategory = ViewBag.Color as SelectList;
    var sizeCategory = ViewBag.Size as SelectList;
}

<h2>新增商品</h2>


@using (Html.BeginForm("Create", "Products", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()

    <div class="row">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="mb-3 col-12 d-flex">
            <div class="col-3">
                @Html.LabelFor(model => model.ProductId, htmlAttributes: new { @class = "form-label" })
                @Html.EditorFor(model => model.ProductId, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ProductId, "", new { @class = "text-danger" })
            </div>

            <div class="col-3 ms-3">
                @Html.LabelFor(model => model.ProductName, htmlAttributes: new { @class = "form-label" })
                @Html.EditorFor(model => model.ProductName, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ProductName, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="col-12">
            <div class="mb-3">
                @Html.LabelFor(model => model.ProductDescription, htmlAttributes: new { @class = "form-label" })
                @Html.TextAreaFor(model => model.ProductDescription, new { @class = "form-control", rows = "5" })
                @Html.ValidationMessageFor(model => model.ProductDescription, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="mb-3">
            @Html.LabelFor(model => model.fk_ProductSubCategoryId, htmlAttributes: new { @class = "form-label" })
            @Html.DropDownListFor(model => model.fk_ProductSubCategoryId, ViewBag.ProductSubCategoryId as SelectList, new { @class = "form-select" })
            @Html.ValidationMessageFor(model => model.fk_ProductSubCategoryId, "", new { @class = "text-danger" })
        </div>
        <div class="mb-3">
            @Html.EditorFor(model => model.Status, new { htmlAttributes = new { @class = "form-check-input" } })
            @Html.LabelFor(model => model.Status, htmlAttributes: new { @class = "form-check-label" })
            @Html.ValidationMessageFor(model => model.Status, "", new { @class = "text-danger" })
        </div>
        <div class="mb-3 col-12 d-flex">
            <div class="col-3">
                @Html.LabelFor(model => model.ProductMaterial, htmlAttributes: new { @class = "form-label" })
                @Html.EditorFor(model => model.ProductMaterial, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ProductMaterial, "", new { @class = "text-danger" })
            </div>

            <div class="col-3 ms-3">
                @Html.LabelFor(model => model.ProductOrigin, htmlAttributes: new { @class = "form-label" })
                @Html.EditorFor(model => model.ProductOrigin, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.ProductOrigin, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="mb-3 col-12 d-flex">
            <div class="col-3">
                @Html.LabelFor(model => model.UnitPrice, htmlAttributes: new { @class = "form-label" })
                @Html.EditorFor(model => model.UnitPrice, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.UnitPrice, "", new { @class = "text-danger" })
            </div>

            <div class="col-3 ms-3">
                @Html.LabelFor(model => model.SalesPrice, htmlAttributes: new { @class = "form-label" })
                @Html.EditorFor(model => model.SalesPrice, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.SalesPrice, "", new { @class = "text-danger" })
            </div>
        </div>
        @*<div class="mb-3 col-12 d-flex">
                <div class="col-3">
                    @Html.LabelFor(model => model.StartTime, htmlAttributes: new { @class = "form-label" })
                    @Html.EditorFor(model => model.StartTime, new { htmlAttributes = new { @class = "form-control", type = "datetime-local" } })
                    @Html.ValidationMessageFor(model => model.StartTime, "", new { @class = "text-danger" })
                </div>

                <div class="col-3 ms-3">
                    @Html.LabelFor(model => model.EndTime, htmlAttributes: new { @class = "form-label" })
                    @Html.EditorFor(model => model.EndTime, new { htmlAttributes = new { @class = "form-control", type = "datetime-local" } })
                    @Html.ValidationMessageFor(model => model.EndTime, "", new { @class = "text-danger" })
                </div>
            </div>*@

        <div class="mb-3">
            @Html.LabelFor(model => model.Tag, htmlAttributes: new { @class = "form-label" })
            @Html.EditorFor(model => model.Tag, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Tag, "", new { @class = "text-danger" })
        </div>

        <div id="createImg">
            <div id="previewImages"></div>
        </div>

        <div class="mb-3">
            @Html.LabelFor(model => model.ImgPaths, htmlAttributes: new { @class = "form-label" })
            <input type="file" name="CreateFile" id="createFile" class="form-control" multiple />
            @Html.ValidationMessageFor(model => model.ImgPaths, "", new { @class = "text-danger" })
        </div>
        <div class="p-3 ms-1 mb-3 border border-4 rounded-2 form-control w-75">
            <div class="mb-3">
                <span>規格</span>
                <button class="btn btn-secondary ms-3 " type="button" id="addSpecBtn">新增規格</button>
            </div>
            <div id="specContainer">
                @*<div class="product-group d-flex">*@
                @*@if (Model.ProductGroups != null)
                    {
                        int index = 0;
                        foreach (var group in Model.ProductGroups)
                        {
                            <div class="product-group d-flex">
                                <select class="form-select" name="ProductGroups[@index].ColorId" required="required">
                                    @foreach (var colorOption in colorCategory)
                                    {
                                        <option value="@colorOption.Value" @(group.ColorId == colorOption.Value ? "selected" : "")>@colorOption.Text</option>
                                    }
                                </select>
                                <select class="form-select" name="ProductGroups[@index].SizeId" required="required">
                                    @foreach (var sizeOption in sizeCategory)
                                    {
                                        <option value="@sizeOption.Value" @(group.SizeId == sizeOption.Value ? "selected" : "")>@sizeOption.Text</option>
                                    }
                                </select>
                                <input class="form-control" type="number" name="ProductGroups[@index].Qty" required="required" min="0" value="@group.Qty" />
                                <button type="button" class="deleteSpecBtn">刪除</button>
                            </div>
                            index++;
                        }
                    }*@


                @*@Html.DropDownListFor(model => model.ProductGroups[0].ColorId, ViewBag.Color as SelectList, new { @class = "form-select" })
                    @Html.ValidationMessageFor(model => model.ProductGroups[0].ColorId, "", new { @class = "text-danger" })

                    @Html.DropDownListFor(model => model.ProductGroups[0].SizeId, ViewBag.Size as SelectList, new { @class = "form-select" })
                    @Html.ValidationMessageFor(model => model.ProductGroups[0].SizeId, "", new { @class = "text-danger" })

                    <input class="form-control" type="number" name="ProductGroups[0].Qty" required="required" min="0" />
                    @Html.ValidationMessageFor(model => model.ProductGroups[0].Qty, "", new { @class = "text-danger" })

                    <button type="button" class="btn btn-danger deleteSpecBtn ms-2">刪除</button>*@


                @*</div>*@
            </div>
        </div>
        <div class="mb-3">
            <input type="submit" value="儲存" class="btn btn-primary" />
            <button class="btn btn-primary ms-3" onclick='location.href="@Url.Action("Index")"'>取消</button>
        </div>
    </div>
}

@section Scripts {
    <script>
        $(document).ready(function () {
            $('input[type="file"]').change(function (e) {
                var files = e.target.files;
                if (files && files.length > 0) {
                    $('#previewImages').empty(); // 清空預覽區域

                    for (var i = 0; i < files.length; i++) {
                        var reader = new FileReader();
                        reader.onload = function (e) {
                            var image = $('<img>');
                            image.attr('src', e.target.result);
                            image.attr('alt', 'Preview');
                            image.css('width', '150px');
                            image.css('height', '150px');
                            $('#previewImages').append(image);
                        };
                        reader.readAsDataURL(files[i]);
                    }
                }
            });
        });
    </script>

    <script>
    $(document).ready(function () {
        var specContainer = $("#specContainer");
        var addSpecBtn = $("#addSpecBtn");
        var index = specContainer.children(".product-group").length;

        function addSpecGroup() {
            var newSpecGroup = $("<div class='product-group d-flex mb-3'></div>");

            var colorSelect = $(`<select class='form-select' name='ProductGroups[${index}].ColorId' required='required'></select>`);
            colorSelect.html(`@Html.Raw(Html.DropDownListFor(model => model.ProductGroups[0].ColorId, colorCategory, new { @class = "form-select" }).ToHtmlString())`);
            newSpecGroup.append(colorSelect);

            var sizeSelect = $(`<select class='form-select' name='ProductGroups[].SizeId' required='required'></select>`);
            sizeSelect.html(`@Html.Raw(Html.DropDownListFor(model => model.ProductGroups[0].SizeId, sizeCategory, new { @class = "form-select" }).ToHtmlString())`);
            newSpecGroup.append(sizeSelect);

            var qtyInput = $("<input class='form-control' type='number' name='ProductGroups[].Qty' required='required' min='0' />");
            newSpecGroup.append(qtyInput);

            var deleteBtn = $("<button type='button' class='btn btn-danger deleteSpecBtn ms-2'>刪除</button>");
            deleteBtn.click(function () {
                if (specContainer.children(".product-group").length > 1) {
                    $(this).parent().remove();
                } else {
                    alert("至少要有一組規格");
                }
            });
            newSpecGroup.append(deleteBtn);

            specContainer.append(newSpecGroup);
        }

        addSpecGroup(); // 呼叫一次以產生初始的規格組

        // 新增規格
        addSpecBtn.click(function () {
            addSpecGroup();
        });
    });
    </script>
    @Scripts.Render("~/bundles/jqueryval")
}
